# ---- Base Stage ----
# Use the latest secure and minimal Node.js image
FROM node:22-alpine AS base
WORKDIR /app
# Copy root dependency manifests to leverage Docker layer caching
COPY package.json package-lock.json ./

# ---- Dependencies Stage ----
# Install all monorepo dependencies required for the build process
FROM base AS dependencies
RUN npm ci

# ---- Builder Stage ----
# Copy all source code to build the workspace
FROM dependencies AS builder
COPY . .
# Build the specific 'web' workspace
RUN npm run build --workspace=@finito/web

# ---- Pruner Stage ----
# Remove development dependencies to shrink the final image size
FROM builder as pruner
RUN npm prune --production

# ---- Production Stage ----
# Create the final, minimal, and secure image
FROM node:22-alpine AS production
# Use the non-root 'node' user's home directory
WORKDIR /home/node/app

# The official node images come with a 'node' user. We use it instead of creating our own.
# Copy only the necessary production artifacts from the previous stages
COPY --from=pruner /app/node_modules ./node_modules
COPY --from=pruner /app/apps/web/.next ./apps/web/.next
COPY --from=pruner /app/apps/web/package.json ./apps/web/package.json
COPY --from=pruner /app/apps/web/next.config.js ./apps/web/next.config.js
COPY --from=pruner /app/apps/web/public ./apps/web/public

# Ensure the non-root 'node' user owns all application files
RUN chown -R node:node /home/node/app

# Switch to the non-root user for runtime
USER node

# Set the working directory to the specific app we want to run
WORKDIR /home/node/app/apps/web

# Expose the port and define the runtime command
EXPOSE 3000
CMD ["npm", "start"]